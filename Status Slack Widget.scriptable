{
  "always_run_in_app" : true,
  "icon" : {
    "color" : "purple",
    "glyph" : "hashtag"
  },
  "name" : "Status Slack Widget",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: purple; icon-glyph: hashtag;\n\/\/ Script is written by whothefuckishrb - GitHub (hrb7 ‚Üí Reddit \/ whothefuckishrb ‚Üí Twitter)\n\/\/ Script-URL = https:\/\/github.com\/whothefuckishrb\/slack-status\n\nconst bgColor = Color.dynamic(Color.white(), new Color('#481349'))\nconst txtColor = Color.dynamic(Color.black(), Color.white())\nconst newDate = new Date()\nconst dateFormatter = new DateFormatter()\nconst widgetSize = config.widgetFamily;\nconst fm = FileManager.iCloud()\nconst dir = fm.joinPath(fm.documentsDirectory(), \"slack-status-widget\")\nif(!fm.fileExists(dir)) {\n  fm.createDirectory(dir)\n}\n\nasync function refreshAfter() {\nlet refreshInterval = await args.widgetParameter\nif (refreshInterval == null) {\n    refreshInterval = 30 \/\/min\n  }\n return refreshInterval\n}\n\nconst apiURL =\n\/\/'https:\/\/status.slack.com\/api\/v2.0.0\/current'\n'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Test%20Cases\/trouble-with-workspace_org_administration.json'\n\/\/'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Test%20Cases\/trouble-with-workspace_org_administration2.json'\n\/\/'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Test%20Cases\/trouble-with-login_sso.json'\n\/\/'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Test%20Cases\/trouble-with-search.json'\n\/\/'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Test%20Cases\/trouble-wiht-login_sso%26messaging.json'\n\/\/'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Test%20Cases\/trouble-with-Apps%3AIntegrations%3AAPIs%26Workspace%3AOrg%20_Administration%26Connections%26Messaging.json'\n\n\/\/ GET DATA FROM API\nlet req = new Request(apiURL)\nlet data = await req.loadJSON()\n\nvar emoji = \" ‚úÖ \"\n if (data.status != 'ok') {\n this.dateCreated = data.date_created\n this.dateUpdated = data.date_updated\n this.dataID = data.active_incidents[0].id\n this.dateCreated2 = data.active_incidents[0].date_created\n this.dateUpdated2 = data.active_incidents[0].date_updated\n this.dataTitle = data.active_incidents[0].title\n this.dataType = data.active_incidents[0].type\n this.dataStatus = data.active_incidents[0].status\n this.dataURL = data.active_incidents[0].url\n this.dataServices = data.active_incidents[0].services\n this.dateCreatedBody = data.active_incidents[0].notes[0].date_created\n this.dataBody = data.active_incidents[0].notes[0].body\n  \n    if (dataType == \"incident\") {\n       emoji = \" ‚ö†Ô∏è \"\n     } else if (dataType == \"outage\") {\n       emoji = \" ‚õîÔ∏è \"\n     } else if (dataType == \"notice\") {\n       emoji = \" üö© \"\n     } else if (dataType == \"maintenance\") {\n       emoji = \" üîß \"\n     }\n  }\n  \n\/\/ LOADING AND SAVING IMAGES FROM URL TO FOLDER\nconst imgURL = 'https:\/\/raw.githubusercontent.com\/whothefuckishrb\/slack-status\/main\/Symbols\/'\nasync function saveImages() {\n  console.log(\"loading & saving images\")\n  var imgs = [\"Slack_Icon\", \"OK\", \"Incident\", \"Outage\", \"Notice\", \"Maintenance\"]\n  for(img of imgs) {\n    let img_path = fm.joinPath(dir, img + \".png\");\n      if(!fm.fileExists(img_path)) {\n      console.log(\"Loading image: \" + img + \".png\")\n      let request = new Request(imgURL + img + \".png\");\n      image = await request.loadImage();\n      fm.writeImage(img_path, image);\n    }\n  }\n}\n\nasync function getImageFor(name) {\n  let img_path = fm.joinPath(dir, name + \".png\")\n  await fm.downloadFileFromiCloud(img_path)\n  img = await fm.readImage(img_path)\n  return img\n}\n\n\/\/ ############ SETUP SMALL WIDGET ############\n  async function createSmallWidget(refreshInterval) {\n  const widget = new ListWidget()\n  widget.backgroundColor = bgColor\n  widget.setPadding(10, 1, 3, 1)\n  var refreshDate = Date.now() + 1000*60*refreshInterval\n  widget.refreshAfterDate = new Date(refreshDate)\n  \n  let titleStack = widget.addStack();\n  titleStack.topAlignContent()\n  \n  titleStack.addSpacer(7)\n\n  var img = await getImageFor(\"Slack_Icon\");\n  const AppIcon = titleStack.addImage(img);\n  AppIcon.imageSize = new Size(20, 20)\n  \n  titleStack.addSpacer(7)\n\n  const title = titleStack.addText(\"Slack Status\");\n  title.font = new Font(\"Futura-Medium\", 17)\n\n  widget.addSpacer(5)\n\n  let statusImageStack = widget.addStack()\n  statusImageStack.centerAlignContent()\n  statusImageStack.setPadding(0, 37, 0, 0)\n \n  if (data.status == 'ok') {\n      widget.url = 'https:\/\/status.slack.com'\n      StatusImage = statusImageStack.addImage(await getImageFor(\"OK\"))\n      StatusImage.imageSize = new Size(77, 77)\n      statusTitle = widget.addText(\"is up and running üöÄ\")\n      statusTitle.font = Font.lightSystemFont(12)\n      statusTitle.centerAlignText()\n      \n} else {\n      widget.url = 'https:\/\/status.slack.com'\n      if (dataType == \"incident\") {\n      StatusImage = statusImageStack.addImage(await getImageFor(\"Incident\"))\n    } else if (dataType == \"outage\") {\n      StatusImage = statusImageStack.addImage(await getImageFor(\"Outage\"))\n    } else if (dataType == \"notice\") {\n      StatusImage = statusImageStack.addImage(await getImageFor(\"Notice\"))\n    } else if (dataType == \"maintenance\") {\n      StatusImage = statusImageStack.addImage(await getImageFor(\"Maintenance\"))\n    }\n\n      StatusImage.imageSize = new Size(77, 77)\n      StatusImage.centerAlignImage\n  \n      headline = widget.addText(\"Trouble with\")\n      headline.textColor = Color.red()\n      headline.font = Font.semiboldSystemFont(11)\n      headline.centerAlignText()\n      \n      let replaceServices = (\"\" + dataServices).replace(\" \", \"\\n\")\n      \n      statusTitle = widget.addText(\"\" + replaceServices)\n      statusTitle.textColor = Color.red()\n      statusTitle.font = Font.semiboldSystemFont(12)  \n      statusTitle.lineLimit = 3\n      statusTitle.minimumScaleFactor = 0.8\n      statusTitle.centerAlignText()\n\n      \n      widget.addSpacer(5);\n}\n\n  dateFormatter.useShortTimeStyle()\n  const footer = widget.addText(\"Last Refresh \" + dateFormatter.string(newDate))  \n  footer.font = Font.mediumSystemFont(9);\n  footer.textOpacity = 0.16\n  footer.centerAlignText()\n\nreturn widget;\n}\n\n\n\/\/ ########### SETUP MEDIUM WIDGET ###########\nasync function createMediumWidget(refreshInterval){\n  const widget = new ListWidget()\n  widget.setPadding(10, 10, 5, 10)\n  widget.backgroundColor = bgColor\n  var refreshDate = Date.now() + 1000*60*refreshInterval\n  widget.refreshAfterDate = new Date(refreshDate)\n\n  const titleStack = widget.addStack();\n\ntitleStack.addSpacer(2)\n\n  var img = await getImageFor(\"Slack_Icon\");\n  let AppIcon = titleStack.addImage(img);\n  AppIcon.imageSize = new Size(22, 22);\n  AppIcon.url = \"slack:\/\/\"\n  \ntitleStack.addSpacer(7)\n  \n  const t1 = titleStack.addText(\"Slack Status api\")\n  t1.font = new Font(\"Futura-Medium\", 19)\n  t1.url = \"slack:\/\/\"\n  \nwidget.addSpacer()\n  \n\/\/ content of the widget\n  const mainStack = widget.addStack()\n  \n\/\/ Left stack contains the status text\n  const leftStack = mainStack.addStack();\n  leftStack.layoutVertically();\n  \n\/\/ Right stack contains the status icon\n  const rightStack = mainStack.addStack();\n  rightStack.layoutVertically();\n  \nif (data.status == 'ok') {\n  rightStack.setPadding(0, 30, 15, 0)\n  leftStack.setPadding(0, 10, 0, 0)\n\nleftStack.addSpacer(25)\n\n  statusTitle = leftStack.addText(\"Slack is up and running üöÄ\")\n  statusTitle.font = Font.lightSystemFont(14)\n  \nleftStack.addSpacer(7)\n\n  let linkSymbol = SFSymbol.named(\"safari\")\n  let linkStack = leftStack.addStack()\n  linkStack.centerAlignContent()\n  linkStack.url = \"https:\/\/slack.com\/help\/articles\/205138367-Troubleshoot-connection-issues\"\n  \n  let linkElement = linkStack.addText(\"Having trouble? \")\n  linkElement.textColor = Color.gray()\n  linkElement.font = Font.lightSystemFont(11)\n  linkElement.textOpacity = 0.4\n  \n  let linkSymbolElement = linkStack.addImage(linkSymbol.image)\n  linkSymbolElement.imageSize = new Size(12, 12)\n  linkSymbolElement.tintColor = Color.gray()\n  linkSymbolElement.imageOpacity = 0.2\n  \n  StatusImage = rightStack.addImage(await getImageFor(\"OK\"))\n  StatusImage.url = 'https:\/\/status.slack.com'\n\n} else {\n  if (dataType == \"incident\") {\n        StatusImage = rightStack.addImage(await getImageFor(\"Incident\"))\n      } else if (dataType == \"outage\") {\n        StatusImage = rightStack.addImage(await getImageFor(\"Outage\"))\n      } else if (dataType == \"notice\") {\n        StatusImage = rightStack.addImage(await getImageFor(\"Notice\"))\n      } else if (dataType == \"maintenance\") {\n        StatusImage = rightStack.addImage(await getImageFor(\"Maintenance\"))\n      }  \n  StatusImage.url = dataURL\n  leftStack.setPadding(0, 5, 0, 0)\n  rightStack.setPadding(0, 5, 5, 0)\n  \nwidget.addSpacer(7)\n\n  apiTitle = leftStack.addText(dataTitle)\n  apiTitle.font = Font.boldSystemFont(12);\n  apiTitle.textColor = Color.red()\n  apiTitle.lineLimit = 2\n  apiTitle.minimumScaleFactor = 0.5\n  \nleftStack.addSpacer(3)\n  \n  apiBody = leftStack.addText(dataBody)\n  apiBody.font = Font.lightSystemFont(12);\n  apiBody.minimumScaleFactor = 0.6\n  apiBody.textColor = Color.red()\n  \nleftStack.addSpacer(3)\n \n  let linkSymbol = SFSymbol.named(\"info.circle\")\n  let linkStack = leftStack.addStack()\n  linkStack.centerAlignContent()\n  linkStack.url = dataURL\n  \n  let linkElement = linkStack.addText(\"Read more about \" + dataType + \" ID \" + dataID)\n  linkElement.textColor = Color.blue()\n  linkElement.font = new Font(\"PingFangTC-Thin\", 10)\n  \nlinkStack.addSpacer(5)\n  \n  let linkSymbolElement = linkStack.addImage(linkSymbol.image)\n  linkSymbolElement.imageSize = new Size(11, 11)\n  linkSymbolElement.tintColor = Color.blue()\n  \n}\n\n  \/\/ set the footer with the latest widget update\n  dateFormatter.useShortDateStyle();\n  dateFormatter.useShortTimeStyle();\n  \n  const footer = widget.addText(\"Last Widget Refresh \" + dateFormatter.string(newDate));\n  footer.font = Font.mediumSystemFont(9);\n  footer.textOpacity = 0.16\n  footer.centerAlignText()\n  \n  return widget;\n}\n\n\n\/\/ ############ SETUP LARGE WIDGET ##############\nasync function createLargeWidget(refreshInterval){\n  const widget = new ListWidget()\n  widget.backgroundColor = bgColor\n  widget.setPadding(10, 15, 5, 10)\n  var refreshDate = Date.now() + 1000*60*refreshInterval\n  widget.refreshAfterDate = new Date(refreshDate)\n  \n\/\/ header of the widget\n  const titleStack = widget.addStack();\n\n  var img = await getImageFor(\"Slack_Icon\");\n  let AppIcon = titleStack.addImage(img);\n  AppIcon.imageSize = new Size(25, 25);\n  AppIcon.url = \"slack:\/\/\"\n  \ntitleStack.addSpacer(7)\n  \n  const t1 = titleStack.addText(\"Slack Status api\")\n  t1.font = new Font(\"Futura-Medium\", 23)\n  t1.url = \"slack:\/\/\"\n  \nwidget.addSpacer()\n  \n\/\/ content of the widget\nif (data.status == 'ok') {\n  widget.addSpacer()\n  StatusImage = widget.addImage(await getImageFor(\"OK\"))\n  \nwidget.addSpacer()\n\n  StatusImage.centerAlignImage()\n  StatusImage.imageSize = new Size(77, 77)\n  StatusImage.url = 'https:\/\/status.slack.com'\n  statusTitle = widget.addText(\"Slack is up and running üöÄ\")  \n  statusTitle.font = new Font(\"Futura-Medium\", 17)\n  \nwidget.addSpacer(5)\n  \n  let linkSymbol = SFSymbol.named(\"safari\")\n  let linkStack = widget.addStack()\n  linkStack.setPadding(0, 103, 0, 0)\n  linkStack.centerAlignContent()\n  linkStack.url = \"https:\/\/slack.com\/help\/articles\/205138367-Troubleshoot-connection-issues\"\n  \n  let linkElement = linkStack.addText(\"Having trouble? \")\n  linkElement.textColor = Color.gray()\n  linkElement.font = Font.lightSystemFont(11)\n  linkElement.textOpacity = 0.4\n  \n  let linkSymbolElement = linkStack.addImage(linkSymbol.image)\n  linkSymbolElement.imageSize = new Size(12, 12)\n  linkSymbolElement.tintColor = Color.gray()\n  linkSymbolElement.imageOpacity = 0.2\n  \n  statusTitle.font = new Font(\"Futura-Medium\", 17)\n  statusTitle.centerAlignText()\n  widget.addSpacer()\n\n} else {\n  if (dataType == \"incident\") {\n        let StatusImage = widget.addImage(await getImageFor(\"Incident\"))\n        StatusImage.imageSize = new Size(77, 77)\n        StatusImage.centerAlignImage()\n        StatusImage.url = dataURL\n      } else if (dataType == \"outage\") {\n        let StatusImage = widget.addImage(await getImageFor(\"Outage\"))\n        StatusImage.imageSize = new Size(77, 77)\n        StatusImage.centerAlignImage()\n        StatusImage.url = dataURL\n      } else if (dataType == \"notice\") {\n        let StatusImage = widget.addImage(await getImageFor(\"Notice\"))\n        StatusImage.imageSize = new Size(77, 77)\n        StatusImage.centerAlignImage()\n        StatusImage.url = dataURL\n      } else if (dataType == \"maintenance\") {\n        let StatusImage = widget.addImage(await getImageFor(\"Maintenance\"))\n        StatusImage.imageSize = new Size(77, 77)\n        StatusImage.centerAlignImage()\n        StatusImage.url = dataURL\n      }\n  \n  apiTitle = widget.addText(dataTitle)\n  apiTitle.font = Font.semiboldSystemFont(14)\n  apiTitle.minimumScaleFactor = 0.5\n  apiTitle.textColor = Color.red()\n  apiTitle.centerAlignText()\n  apiTitle.lineLimit = 2\n  \nwidget.addSpacer(3)\n  \n  apiBody = widget.addText(dataBody)\n  apiBody.font = Font.lightSystemFont(10);\n  apiBody.minimumScaleFactor = 0.7\n  apiBody.textColor = Color.red()\n  apiBody.centerAlignText()\n \n  let linkSymbol = SFSymbol.named(\"info.circle\")\n  let linkStack = widget.addStack()\n  linkStack.centerAlignContent()\n  linkStack.setPadding(0, 50, 0, 0)\n  linkStack.url = dataURL\n  \n  let linkElement = linkStack.addText(\"Read more about \" + dataType + \" ID \" + dataID)\n  linkElement.textColor = Color.blue()\n  linkElement.font = Font.lightSystemFont(12)\n\nlinkStack.addSpacer(3)\n\n  let linkSymbolElement = linkStack.addImage(linkSymbol.image)\n  linkSymbolElement.imageSize = new Size(12, 12)\n  linkSymbolElement.tintColor = Color.blue()\n}\n\nwidget.addSpacer()\n  \n\/\/List of the single Services\n const mainStack = widget.addStack()\n  const leftStack = mainStack.addStack()\n  leftStack.layoutVertically()\n   const rightStack = mainStack.addStack()\n   rightStack.layoutVertically()\n\n  \/\/ ### Line Number 1 ###\n  const line1 = widget.addStack()\n  const loginStack = line1.addStack()\n  const login = loginStack.addText('Login\/SSO')\n  login.font = Font.lightSystemFont(12)\n  loginStack.addSpacer(54)\n  if (data.status != 'ok' && dataServices.includes(\"Login\/SSO\")) {\n     if (dataType == \"incident\") {\n     statusIcon = loginStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = loginStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataTypee == \"notice\") {\n     statusIcon = loginStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = loginStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = loginStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n  \n  loginStack.addSpacer()\n\n  const ConnectionsStack = line1.addStack()\n  const Connections = ConnectionsStack.addText('Connections')\n  Connections.font = Font.lightSystemFont(12)\n  ConnectionsStack.addSpacer(48)\n  if (data.status != 'ok' && dataServices.includes(\"Connections\")) {\n     if (dataType == \"incident\") {\n     statusIcon = ConnectionsStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = ConnectionsStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = ConnectionsStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = ConnectionsStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = ConnectionsStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n  \nConnectionsStack.addSpacer() \n  \n  \/\/ ### Line Number 2 ###\n  const line2 = widget.addStack()\n  const MessagingStack = line2.addStack()\n  const Messaging = MessagingStack.addText('Messaging')\n  Messaging.font = Font.lightSystemFont(12)\n  MessagingStack.addSpacer(52) \n  if (data.status != 'ok' && dataServices.includes(\"Messaging\")) {\n     if (dataType == \"incident\") {\n     statusIcon = MessagingStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = MessagingStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = MessagingStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataTypee == \"maintenance\") {\n     statusIcon = MessagingStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = MessagingStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n  \n  MessagingStack.addSpacer()\n\n  const LinkPreviewStack = line2.addStack()\n  const LinkPreview = LinkPreviewStack.addText('Link Previews')\n  LinkPreview.font = Font.lightSystemFont(12)\n  LinkPreviewStack.addSpacer(43) \n  if (data.status != 'ok' && dataServices.includes(\"Link Previews\")) {\n     if (dataType == \"incident\") {\n     statusIcon = LinkPreviewStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = LinkPreviewStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = LinkPreviewStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = LinkPreviewStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = LinkPreviewStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n  \nLinkPreviewStack.addSpacer()\n  \n  \/\/ ### Line Number 3 ###\n  const line3 = widget.addStack()\n  const PostsFilesStack = line3.addStack()\n  const PostsFiles = PostsFilesStack.addText('Posts\/Files')\n  PostsFiles.font = Font.lightSystemFont(12)\n  PostsFilesStack.addSpacer(53) \n  if (data.status != 'ok' && dataServices.includes(\"Posts\/Files\")) {\n     if (dataType == \"incident\") {\n     statusIcon = PostsFilesStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = PostsFilesStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = PostsFilesStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = PostsFilesStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = PostsFilesStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n  \n  PostsFilesStack.addSpacer()\n\n  const NotificationsStack = line3.addStack()\n  const Notifications = NotificationsStack.addText('Notifications')\n  Notifications.font = Font.lightSystemFont(12)\n  NotificationsStack.addSpacer(48)\n  if (data.status != 'ok' && dataServices.includes(\"Notifications\")) {\n     if (dataType == \"incident\") {\n     statusIcon = NotificationsStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = NotificationsStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = NotificationsStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = NotificationsStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n    statusIcon = NotificationsStack.addImage(await getImageFor(\"OK\"))\n    statusIcon.imageSize = new Size(20, 20)\n}\n  \nNotificationsStack.addSpacer()  \n  \n  \/\/ ### Line Number 4 ###  \n  const line4 = widget.addStack()\n  const CallsStack = line4.addStack()\n  const Calls = CallsStack.addText('Calls')\n  Calls.font = Font.lightSystemFont(12)\n  CallsStack.addSpacer(85)\n  if (data.status != 'ok' && dataServices.includes(\"Calls\")) {\n     if (dataType == \"incident\") {\n     statusIcon = CallsStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = CallsStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = CallsStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = CallsStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = CallsStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n\n  CallsStack.addSpacer()\n\n  const SearchStack = line4.addStack()\n  const Search = SearchStack.addText('Search')\n  Search.font = Font.lightSystemFont(12)\n  SearchStack.addSpacer(79)\n  if (data.status != 'ok' && dataServices.includes(\"Search\")) {\n     if (dataType == \"incident\") {\n     statusIcon = SearchStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = SearchStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = SearchStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = SearchStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = SearchStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n    \nSearchStack.addSpacer()\n  \n  \/\/ ### Line Number 5 ###\n  const line5 = widget.addStack()\n  const AppsStack = line5.addStack()\n  const Apps = AppsStack.addText('Apps\/APIs\/\\nIntegrations')\n  Apps.font = Font.lightSystemFont(12)\n  AppsStack.addSpacer(46)\n  if (data.status != 'ok' && dataServices.includes(\"Apps\/Integrations\/APIs\")) {\n     if (dataType == \"incident\") {\n     statusIcon = AppsStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = AppsStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = AppsStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = AppsStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = AppsStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n  \n  AppsStack.addSpacer()\n\n  const WorkspaceStack = line5.addStack()\n  const Workspace = WorkspaceStack.addText('Workspace\/Org\/\\nAdministration')\n  Workspace.font = Font.lightSystemFont(12)\n  WorkspaceStack.addSpacer(29)\n  if (data.status != 'ok' && dataServices.includes(\"Workspace\/Org Administration\")) {\n     if (dataType == \"incident\") {\n     statusIcon = WorkspaceStack.addImage(await getImageFor(\"Incident\"))\n   } else if (dataType == \"outage\") {\n     statusIcon = WorkspaceStack.addImage(await getImageFor(\"Outage\"))\n   } else if (dataType == \"notice\") {\n     statusIcon = WorkspaceStack.addImage(await getImageFor(\"Notice\"))\n   } else if (dataType == \"maintenance\") {\n     statusIcon = WorkspaceStack.addImage(await getImageFor(\"Maintenance\"))\n   }\n     statusIcon.imageSize = new Size(20, 20)\n} else {\n   statusIcon = WorkspaceStack.addImage(await getImageFor(\"OK\"))\n   statusIcon.imageSize = new Size(20, 20)\n}\n\nWorkspaceStack.addSpacer()\nwidget.addSpacer()\n  \n\/\/ shows the last widget update\n  dateFormatter.useMediumDateStyle();\n  dateFormatter.useShortTimeStyle();\n  \n  const footer = widget.addText(\"Last Widget Refresh \" + dateFormatter.string(newDate));  \n  footer.font = Font.mediumSystemFont(9);\n  footer.textOpacity = 0.16\n  footer.centerAlignText()\n\nreturn widget\n}\n\n\n\/\/ Runtime images:\nawait saveImages()\ntry {\n  saveData(data)\n} catch {}\n\nif (config.runsInApp) {\n    await presentMenu()\n} else if (config.runsInWidget) {\n  switch(widgetSize) {\n    case \"small\": widget = await createSmallWidget();\n    break;\n    case \"medium\": widget = await createMediumWidget();\n    break;\n    case \"large\": widget = await createLargeWidget();\n    break;\n    default: widget = await createMediumWidget();\n  }\n  Script.setWidget(widget)\n}\n\nasync function presentMenu() {\n  let alert = new Alert(data)\n  alert.title = \"Slack Status Widget\"\n  alert.message = emoji + ' \"' + data.status.toUpperCase() + '\" ' + emoji\n  alert.addAction(\"Small\")\n  alert.addAction(\"Medium\")\n  alert.addAction(\"Large\")\n  alert.addDestructiveAction(\"Web Dashboard ‚Üó\")\n  alert.addCancelAction(\"Cancel\")\n  let idx = await alert.presentSheet(data)\n  if (idx == 0) {\n    let widget = await createSmallWidget(data)\n    await widget.presentSmall()\n  } else if (idx == 1) {\n    let widget = await createMediumWidget(data)\n    await widget.presentMedium()\n  } else if (idx == 2) {\n    let widget = await createLargeWidget(data)\n    await widget.presentLarge()\n  } else if (idx == 3) {\n    Safari.openInApp(\"https:\/\/status.slack.com\")\n  } \n}\n",
  "share_sheet_inputs" : [

  ]
}